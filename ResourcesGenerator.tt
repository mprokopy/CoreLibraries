<#
// <auto-generated />
// ReSharper disable all
#>
<#@ template hostspecific="true" debug="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#
    var model = LoadResources();
#>
// Copyright (c) Michael Prokopyev. All rights reserved.

namespace <#= model?.Namespace #>
{
    #region usings section

<#  if ((model?.Resources ?? new List<Resource>()).Any(r => r?.Parameters?.Any() == true))
    {
#>
    using System.Globalization;
<#
    }
#>
    using System.Reflection;
    using System.Resources;

    #endregion usings section

    <#= model?.AccessModifier #> static class <#= model?.Class #>
    {
        private static readonly ResourceManager _resourceManager = new ResourceManager("<#= model?.ResourceName #>", typeof(<#= model?.Class #>).GetTypeInfo().Assembly);
<#
    foreach (var resource in model?.Resources ?? new List<Resource>())
    {
#>

        /// <summary>
<#
        foreach (var line in Lines(resource?.Value) ?? new List<string>())
        {
#>
        /// <#= Xml(line) #>
<#
        }
#>
        /// </summary>
<#
        if (resource?.Parameters?.Any() == true)
        {
#>
        public static string <#= resource.Name #>(<#= List("object ", resource.Parameters) #>) => string.Format(CultureInfo.CurrentCulture, GetString("<#= resource.Name #>", <#= List("nameof(", resource.Parameters, ")") #>), <#= List(resource.Parameters) #>);
<#
        }
        else
        {
#>
        public static string <#= resource?.Name #> => GetString("<#= resource?.Name #>");
<#
        }
    }
#>

        internal static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace($"{{{formatterNames[i]}}}", $"{{{i}}}");
            }

            return value;
        }
    }
}
<#+
    private ResourceFile LoadResources()
    {
        var result = new ResourceFile();

        if (Session?.ContainsKey("AccessModifier") == true)
        {
            result.AccessModifier = (string)Session["AccessModifier"];
        }

        var service = (IServiceProvider)Host;
        var dte = (DTE)service?.GetCOMService(typeof(DTE));

        var resourceFile = (string)Session?["ResourceFile"];
        if (!Path.IsPathRooted(resourceFile))
        {
            resourceFile = Host?.ResolvePath(resourceFile);
        }

        var resourceProjectItem = dte?.Solution?.FindProjectItem(resourceFile);
        var templateProjectItem = dte?.Solution?.FindProjectItem(Host?.TemplateFile);
        var project = templateProjectItem?.ContainingProject;
        var rootNamespace = (string)project?.Properties?.Item("RootNamespace")?.Value;
        var resourceDir = Path.GetDirectoryName(resourceFile);
        var projectDir = (string)project?.Properties?.Item("FullPath")?.Value;
        var resourceNamespace = rootNamespace + "." + resourceDir?.Substring(projectDir?.Length ?? 0);
        result.Namespace = (string)resourceProjectItem?.Properties?.Item("CustomToolNamespace")?.Value;
        if (string.IsNullOrEmpty(result.Namespace))
        {
            result.Namespace = resourceNamespace;
        }

        result.Class = Path.GetFileNameWithoutExtension(resourceFile);

        result.ResourceName = resourceNamespace + "." + result.Class;

        using (var reader = new ResXResourceReader(resourceFile))
        {
            result.Resources = (from DictionaryEntry r in reader
                let value = (string)r.Value
                select new Resource
                {
                    Name = (string)r.Key,
                    Value = value,
                    Parameters = Regex.Matches(value, @"\{(?!\})(\w+)\}(?!\})").Cast<Match>().Select(m => m?.Groups[1].Value)
                        .Distinct().ToList()
                }).ToList();
        }

        return result;
    }

    private static IEnumerable<string> Lines(string value) => value?.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

    private static string Xml(string value) => value?.Replace("<", "&lt;").Replace(">", "&gt;");

    private static string List(IEnumerable<string> items) => List(null, items);

    private static string List(string prefix, IEnumerable<string> items, string suffix = null) => string.Join(", ", items?.Select(i => prefix + i + suffix) ?? new List<string>());

    private sealed class Resource
    {
        public string Name { get; set; }

        public string Value { get; set; }

        public IEnumerable<string> Parameters { get; set; } = new List<string>();
    }

    private sealed class ResourceFile
    {
        public string Namespace { get; set; }

        public string AccessModifier { get; set; } = "public";

        public string Class { get; set; }

        public string ResourceName { get; set; }

        public IEnumerable<Resource> Resources { get; set; } = new List<Resource>();
    }
#>
